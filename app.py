from flask import Flask, request, jsonify
import telebot
import os
import logging
import time

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
TOKEN = os.environ.get('7936477847:AAGFEZeSzqqoeLLvcgjd_fMW56-_zdXx5_0')  # –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
bot = telebot.TeleBot(TOKEN)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç –Ω–∞ Flask –∏ Render! üëã\n"
                          "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")

@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """
    üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    /about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
    /echo [—Ç–µ–∫—Å—Ç] - –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç
    """
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['about'])
def about(message):
    bot.reply_to(message, "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞:\n"
                          "- Python Flask\n"
                          "- Telebot\n"
                          "- Render.com\n"
                          "üîÑ –†–∞–±–æ—Ç–∞–µ—Ç 24/7 –±–ª–∞–≥–æ–¥–∞—Ä—è –≤–µ–±—Ö—É–∫–∞–º –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É")

@bot.message_handler(commands=['echo'])
def echo(message):
    try:
        text = message.text.split(' ', 1)[1]
        bot.reply_to(message, f"üîÅ –í—ã —Å–∫–∞–∑–∞–ª–∏: {text}")
    except IndexError:
        bot.reply_to(message, "‚ùå –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /echo")

# –í–µ–±—Ö—É–∫ –¥–ª—è Telegram
@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        if request.headers.get('content-type') == 'application/json':
            json_data = request.get_json()
            update = telebot.types.Update.de_json(json_data)
            bot.process_new_updates([update])
            return jsonify({"status": "ok"}), 200
        return jsonify({"error": "Invalid content type"}), 403
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return jsonify({"error": str(e)}), 500

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route('/')
def hello_world():
    return 'ü§ñ Telegram Bot is running! Visit /status for bot status'

# –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
@app.route('/status')
def status():
    if TOKEN:
        try:
            webhook_info = bot.get_webhook_info()
            bot_info = bot.get_me()
            return jsonify({
                "status": "running",
                "webhook_set": webhook_info.url,
                "bot_username": bot_info.username
            })
        except Exception as e:
            return jsonify({"error": str(e)}), 500
    else:
        return jsonify({"status": "running", "message": "Token not configured"})

# –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@app.route('/ping')
def ping():
    return "pong", 200

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def set_webhook():
    if TOKEN and os.environ.get('RENDER_EXTERNAL_HOSTNAME'):
        webhook_url = f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}/webhook"
        try:
            bot.remove_webhook()
            time.sleep(1)
            bot.set_webhook(url=webhook_url)
            logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: {webhook_url}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
set_webhook()

if __name__ == '__main__':
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –≤–µ–±—Ö—É–∫–∞
    if TOKEN:
        bot.polling(non_stop=True)
    else:
        app.run(host='0.0.0.0', port=8080, debug=True)
